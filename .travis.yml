# 언어와 jdk의 버전을 지정한다.
language: java
jdk:
  - openjdk11

# 어느 브랜치가 push 될 때 수행할지 지정한다.
# 오직 main 브랜치가 push될 때 수행하도록 지정하였다.
branches:
  only:
    - main

# 빌드 전에 gradlew의 권한을 추가한다.
before_install:
  - chmod +x gradlew

# Travis CI 서버의 Home
# gradle을 통하여 의존성을 받게 되면 이를 캐시하여 배포할 때 마다 다시 받지 않도록 설정한다.
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# main 브랜치에 push 되면 수행되는 명령어이다.
# 프로젝트 내에 권한이 추가된 gradlew를 활용하여 clean, build를 진행한다.
script: "./gradlew clean build"


before_deploy:
  - mkdir -p before-deploy # zip에 포함시킬 파일들을 담을 디렉토리 생성
  - cp scripts/*.sh before-deploy/   # 배포 스크립트 디렉토리에 담기
  - cp appspec.yml before-deploy/    # 배포에 필요한 appspec.yml
  - cp dockerfile before-deploy/     # dockerfile 넘기기
  - cp build/libs/*.jar before-deploy/  # jar 파일 넘기기
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동후 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/SpringBoot_Nginx.zip # deploy로 zip파일 이동

deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # 트레비스 레포 세팅에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # "

    bucket: alisyabob-springboot-build # s3 버킷이름
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 파일 접근 방식을 rpivate으로 함
    local_dir: deploy # before_deploy에서 생성한 디렉토리
    wait-until-deployed: true
    on:
      all_branches: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY        # Travis CI 에서 IAM 사용자 엑세스 키

    secret_access_key: $AWS_SECRET_KEY    # Travis CI 에서 IAM 사용자 비밀 엑세스 키

    bucket: alisyabob-springboot-build         # S3 Bucket 이름
    key: SpringBoot_Nginx.zip   # 위에서 만든 zip 파일 이름 !! (꼭 맞춰서 적어야함)
    bundle_type: zip
    application: test-deploy          # CodeDeploy 애플리케이션 이름

    deployment_group: test-deploy   # CodeDeploy 배포 그룹 이름

    region: ap-northeast-2
    wait-until-deployed: true
# CI 실행 완료 시 작성한 이메일로 알람
notifications:
  email:
    recipients:
      - sjs939883@gmail.com